# Generated by Django 5.1.6 on 2025-04-11 08:16

import django.contrib.auth.models
import django.contrib.auth.validators
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='AppointmentForm',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fullname', models.TextField(max_length=200, null=True)),
                ('email', models.EmailField(max_length=254)),
                ('ward', models.PositiveIntegerField(choices=[(1, 'Ward 1'), (2, 'Ward 2'), (3, 'Ward 3'), (4, 'Ward 4'), (5, 'Ward 5'), (6, 'Ward 6'), (7, 'Ward 7'), (8, 'Ward 8'), (9, 'Ward 9'), (10, 'Ward 10'), (11, 'Ward 11'), (12, 'Ward 12'), (13, 'Ward 13'), (14, 'Ward 14'), (15, 'Ward 15'), (16, 'Ward 16'), (17, 'Ward 17'), (18, 'Ward 18'), (19, 'Ward 19'), (20, 'Ward 20'), (21, 'Ward 21'), (22, 'Ward 22'), (23, 'Ward 23'), (24, 'Ward 24'), (25, 'Ward 25'), (26, 'Ward 26'), (27, 'Ward 27'), (28, 'Ward 28'), (29, 'Ward 29'), (30, 'Ward 30'), (31, 'Ward 31'), (32, 'Ward 32'), (33, 'Ward 33'), (34, 'Ward 34'), (35, 'Ward 35')])),
                ('certificates', models.JSONField()),
                ('request_type', models.BooleanField(default=False)),
                ('iscomplete', models.BooleanField(default=False, null=True)),
                ('isschedule', models.BooleanField(default=False, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Contact',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('message', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='CustomUserModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('word_no', models.IntegerField(null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
